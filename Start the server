const SHA256 = require('crypto-js/sha256');
const express = require('express');

class Block {
  constructor(index, timestamp, data, previousHash = '') {
    this.index = index;
    this.timestamp = timestamp;
    this.data = data;
    this.previousHash = previousHash;
    this.hash = this.calculateHash();
  }

  calculateHash() {
    return SHA256(this.index + this.previousHash + this.timestamp + JSON.stringify(this.data)).toString();
  }
}

class Blockchain {
  constructor() {
    this.chain = [this.createGenesisBlock()];
  }

  createGenesisBlock() {
    return new Block(0, new Date().toString(), 'Genesis block', '0');
  }

  getLatestBlock() {
    return this.chain[this.chain.length - 1];
  }

  addBlock(newBlock) {
    newBlock.previousHash = this.getLatestBlock().hash;
    newBlock.hash = newBlock.calculateHash();
    this.chain.push(newBlock);
  }

  isChainValid() {
    for (let i = 1; i < this.chain.length; i++) {
      const currentBlock = this.chain[i];
      const previousBlock = this.chain[i - 1];

      if (currentBlock.hash !== currentBlock.calculateHash()) {
        return false;
      }

      if (currentBlock.previousHash !== previousBlock.hash) {
        return false;
      }
    }

    return true;
  }
}

const app = express();
const blockchain = new Blockchain();

app.get('/blockchain', (req, res) => {
  res.send(blockchain.chain);
});

app.post('/blockchain', (req, res) => {
  const newBlock = new Block(blockchain.chain.length, new Date().toString(), req.body);
  blockchain.addBlock(newBlock);
  res.send('Block added to the chain.');
});

app.get('/blockchain/validate', (req, res) => {
  res.send(`The blockchain is ${blockchain.isChainValid() ? 'valid' : 'invalid'}.`);
});

app.listen(3000, () => {
  console.log('Server started on port 3000');
});
